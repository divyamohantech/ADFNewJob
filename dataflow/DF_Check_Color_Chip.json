{
	"name": "DF_Check_Color_Chip",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "SQLDynamicDS",
						"type": "DatasetReference"
					},
					"name": "SRInCSV"
				},
				{
					"dataset": {
						"referenceName": "SQLDynamicDS",
						"type": "DatasetReference"
					},
					"name": "SRPanel"
				},
				{
					"dataset": {
						"referenceName": "SQLDynamicDS",
						"type": "DatasetReference"
					},
					"name": "SRColorTool"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "SQLDynamicDS",
						"type": "DatasetReference"
					},
					"name": "SKColorTool"
				}
			],
			"transformations": [
				{
					"name": "join1"
				},
				{
					"name": "join2"
				},
				{
					"name": "select1"
				},
				{
					"name": "derivedColumn1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          PANEL_COLOR_COORDINATE_ID as integer,",
				"          PANEL_ID as integer,",
				"          GEOMETRY as string,",
				"          SPARKLE as string,",
				"          MEASUREMENT_SCHEME as string,",
				"          L as string,",
				"          A as string,",
				"          B as string,",
				"          C as string,",
				"          ILLUMINANT_OBSERVE as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> SRInCSV",
				"source(output(",
				"          PANEL_COLOR_COORDINATE_ID as integer,",
				"          PANEL_ID as integer,",
				"          GEOMETRY as string,",
				"          SPARKLE as string,",
				"          MEASUREMENT_SCHEME as string,",
				"          L as string,",
				"          A as string,",
				"          B as string,",
				"          C as string,",
				"          ILLUMINANT_OBSERVE as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> SRPanel",
				"source(output(",
				"          PANEL_COLOR_COORDINATE_ID as integer,",
				"          PANEL_ID as integer,",
				"          GEOMETRY as string,",
				"          SPARKLE as string,",
				"          MEASUREMENT_SCHEME as string,",
				"          L as string,",
				"          A as string,",
				"          B as string,",
				"          C as string,",
				"          ILLUMINANT_OBSERVE as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> SRColorTool",
				"SRInCSV, SRPanel join(Color_Chip_Name == SRPanel@NAME,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1, SRColorTool join(SRInCSV@COLOR_Tool_Name == SRColorTool@COLOR_TOOL_NAME,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2",
				"join2 select(mapColumn(",
				"          PANEL_ID = SRPanel@PANEL_ID,",
				"          Color_Chip_Source,",
				"          DateTime,",
				"          COLOR_TOOL_ID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 derive(PANEL_ID = PANEL_ID,",
				"          COLOR_TOOL_ID = COLOR_TOOL_ID) ~> derivedColumn1",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          PANEL_COLOR_COORDINATE_ID as integer,",
				"          PANEL_ID as integer,",
				"          GEOMETRY as string,",
				"          SPARKLE as string,",
				"          MEASUREMENT_SCHEME as string,",
				"          L as string,",
				"          A as string,",
				"          B as string,",
				"          C as string,",
				"          ILLUMINANT_OBSERVE as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> SKColorTool"
			]
		}
	}
}