{
	"name": "DF4_SpectralReading",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "SQLDynamicDS",
						"type": "DatasetReference"
					},
					"name": "SRInCsv"
				},
				{
					"dataset": {
						"referenceName": "SQLDynamicDS",
						"type": "DatasetReference"
					},
					"name": "SRTablePanel"
				},
				{
					"dataset": {
						"referenceName": "SQLDynamicDS",
						"type": "DatasetReference"
					},
					"name": "SRTableSpectralReading"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "SQLDynamicDS",
						"type": "DatasetReference"
					},
					"name": "SKTableSpectralReading"
				}
			],
			"transformations": [
				{
					"name": "SRInCSVjoinSRTablePanel"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "exists1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          PANEL_ID as integer,",
				"          NAME as string,",
				"          IS_METALLIC as integer,",
				"          CREATE_USER_ID as integer,",
				"          CREATE_DATE as timestamp,",
				"          NOTES as string,",
				"          IS_PUBLIC as integer,",
				"          ENTITY_ID as integer,",
				"          IS_INACTIVE as integer,",
				"          AUDIT_SEARCH_INDEX_DATE as timestamp,",
				"          IS_FLAGGED as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> SRInCsv",
				"source(output(",
				"          PANEL_ID as integer,",
				"          NAME as string,",
				"          IS_METALLIC as integer,",
				"          CREATE_USER_ID as integer,",
				"          CREATE_DATE as timestamp,",
				"          NOTES as string,",
				"          IS_PUBLIC as integer,",
				"          ENTITY_ID as integer,",
				"          IS_INACTIVE as integer,",
				"          AUDIT_SEARCH_INDEX_DATE as timestamp,",
				"          IS_FLAGGED as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> SRTablePanel",
				"source(output(",
				"          READING_ID as integer,",
				"          PANEL_ID as integer,",
				"          READING_DATE as timestamp,",
				"          MEASUREMENT_SCHEME as string,",
				"          DEVICE_NAME as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> SRTableSpectralReading",
				"exists1, SRTablePanel join(COLOR_Tool_Name == SRTablePanel@NAME",
				"     && ERROR_FUNCTION('') == ERROR_FUNCTION(''),",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> SRInCSVjoinSRTablePanel",
				"SRInCSVjoinSRTablePanel aggregate(groupBy(Scheme,",
				"          Instrument,",
				"          DateTime),",
				"     Scheme1 = first(Scheme),",
				"          DateTime1 = first(DateTime),",
				"          Instrument1 = first(Instrument),",
				"          PANEL_ID = max(SRTablePanel@PANEL_ID)) ~> aggregate1",
				"SRInCsv exists(ERROR_FUNCTION('') == ERROR_FUNCTION(''),",
				"     negate:true,",
				"     broadcast: 'auto')~> exists1",
				"aggregate1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          PANEL_ID as integer,",
				"          NAME as string,",
				"          IS_METALLIC as integer,",
				"          CREATE_USER_ID as integer,",
				"          CREATE_DATE as timestamp,",
				"          NOTES as string,",
				"          IS_PUBLIC as integer,",
				"          ENTITY_ID as integer,",
				"          IS_INACTIVE as integer,",
				"          AUDIT_SEARCH_INDEX_DATE as timestamp,",
				"          IS_FLAGGED as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          PANEL_ID,",
				"          READING_DATE = DateTime,",
				"          MEASUREMENT_SCHEME = Scheme1,",
				"          DEVICE_NAME = Instrument",
				"     )) ~> SKTableSpectralReading"
			]
		}
	}
}