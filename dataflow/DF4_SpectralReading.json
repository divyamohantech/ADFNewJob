{
	"name": "DF4_SpectralReading",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "SQLDynamicDS",
						"type": "DatasetReference"
					},
					"name": "SRInCsv",
					"description": "Import data from SQLDynamicDS  New"
				},
				{
					"dataset": {
						"referenceName": "SQLDynamicDS",
						"type": "DatasetReference"
					},
					"name": "SRTablePanel"
				},
				{
					"dataset": {
						"referenceName": "SQLDynamicDS",
						"type": "DatasetReference"
					},
					"name": "SRTableSpectralReading"
				},
				{
					"dataset": {
						"referenceName": "SQLDynamicDS",
						"type": "DatasetReference"
					},
					"name": "SRInCsvRejFile"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "SQLDynamicDS",
						"type": "DatasetReference"
					},
					"name": "SKTableSpectralReading"
				},
				{
					"dataset": {
						"referenceName": "DelimitedTextDymanicCSVFiles",
						"type": "DatasetReference"
					},
					"name": "SKFileReadingRejectCSV"
				},
				{
					"name": "SKCacheMAXREADINGID"
				}
			],
			"transformations": [
				{
					"name": "SRInCSVjoinSRTablePanel"
				},
				{
					"name": "DistinctValues"
				},
				{
					"name": "DontExistsNewRecords"
				},
				{
					"name": "FNAggMAXReadingID"
				},
				{
					"name": "joinExisitngRecords"
				},
				{
					"name": "SelectSPECTRALREADINGColumns"
				},
				{
					"name": "DistinctReadingColumns"
				},
				{
					"name": "SelectTableColumnReading"
				}
			],
			"scriptLines": [
				"source(output(",
				"          COLOR_Tool_Name as string,",
				"          Color_Chip_Name as string,",
				"          DateTime as string,",
				"          Color_Chip_Source as string,",
				"          Scheme as string,",
				"          Instrument as string,",
				"          Geometry as string,",
				"          {400} as string,",
				"          {410} as string,",
				"          {420} as string,",
				"          {430} as string,",
				"          {440} as string,",
				"          {450} as string,",
				"          {460} as string,",
				"          {470} as string,",
				"          {480} as string,",
				"          {490} as string,",
				"          {500} as string,",
				"          {510} as string,",
				"          {520} as string,",
				"          {530} as string,",
				"          {540} as string,",
				"          {550} as string,",
				"          {560} as string,",
				"          {570} as string,",
				"          {580} as string,",
				"          {590} as string,",
				"          {600} as string,",
				"          {610} as string,",
				"          {620} as string,",
				"          {630} as string,",
				"          {640} as string,",
				"          {650} as string,",
				"          {660} as string,",
				"          {670} as string,",
				"          {680} as string,",
				"          {690} as string,",
				"          {700} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> SRInCsv",
				"source(output(",
				"          PANEL_ID as integer,",
				"          NAME as string,",
				"          IS_METALLIC as integer,",
				"          CREATE_USER_ID as integer,",
				"          CREATE_DATE as timestamp,",
				"          NOTES as string,",
				"          IS_PUBLIC as integer,",
				"          ENTITY_ID as integer,",
				"          IS_INACTIVE as integer,",
				"          AUDIT_SEARCH_INDEX_DATE as timestamp,",
				"          IS_FLAGGED as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> SRTablePanel",
				"source(output(",
				"          READING_ID as integer,",
				"          PANEL_ID as integer,",
				"          READING_DATE as timestamp,",
				"          MEASUREMENT_SCHEME as string,",
				"          DEVICE_NAME as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> SRTableSpectralReading",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> SRInCsvRejFile",
				"DontExistsNewRecords, SRTablePanel join(Color_Chip_Name == NAME,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> SRInCSVjoinSRTablePanel",
				"SRInCSVjoinSRTablePanel aggregate(groupBy(Scheme,",
				"          Instrument,",
				"          PANEL_ID),",
				"     READING_DATE = max(DateTime)) ~> DistinctValues",
				"SRInCsv, SRTableSpectralReading exists(Scheme == MEASUREMENT_SCHEME",
				"     && Instrument == DEVICE_NAME,",
				"     negate:true,",
				"     broadcast: 'left')~> DontExistsNewRecords",
				"SRTableSpectralReading aggregate(MAX_READING_ID = iifNull(max(READING_ID),0)) ~> FNAggMAXReadingID",
				"SRInCsvRejFile, SRTableSpectralReading join(Scheme == MEASUREMENT_SCHEME",
				"     && Instrument == DEVICE_NAME,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinExisitngRecords",
				"joinExisitngRecords select(mapColumn(",
				"          READING_ID,",
				"          PANEL_ID,",
				"          READING_DATE,",
				"          MEASUREMENT_SCHEME = {SRTableSpectralReading@MEASUREMENT_SCHEME},",
				"          DEVICE_NAME",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: true) ~> SelectSPECTRALREADINGColumns",
				"SelectSPECTRALREADINGColumns aggregate(MEASUREMENT_SCHEME = first(MEASUREMENT_SCHEME),",
				"          DEVICE_NAME = first(DEVICE_NAME)) ~> DistinctReadingColumns",
				"DistinctValues select(mapColumn(",
				"          MEASUREMENT_SCHEME = Scheme,",
				"          DEVICE_NAME = Instrument,",
				"          PANEL_ID,",
				"          READING_DATE",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectTableColumnReading",
				"SelectTableColumnReading sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 1,",
				"     errorHandlingOption: 'stopOnFirstError') ~> SKTableSpectralReading",
				"DistinctReadingColumns sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['SPECTRAL_READING_Rejected.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> SKFileReadingRejectCSV",
				"FNAggMAXReadingID sink(validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     store: 'cache',",
				"     format: 'inline',",
				"     output: true,",
				"     saveOrder: 1) ~> SKCacheMAXREADINGID"
			]
		}
	}
}