{
	"name": "DF5_SpectralMeasurement",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "SQLDynamicDS",
						"type": "DatasetReference"
					},
					"name": "SRInCSV"
				},
				{
					"dataset": {
						"referenceName": "SQLDynamicDS",
						"type": "DatasetReference"
					},
					"name": "SRTableSPECTRALMEASUREMENT"
				},
				{
					"dataset": {
						"referenceName": "SQLDynamicDS",
						"type": "DatasetReference"
					},
					"name": "SRSpectralReading"
				},
				{
					"dataset": {
						"referenceName": "SQLDynamicDS",
						"type": "DatasetReference"
					},
					"name": "SRInCsvRejFile"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "SQLDynamicDS",
						"type": "DatasetReference"
					},
					"name": "SKSpectralMeasurement"
				}
			],
			"transformations": [
				{
					"name": "SRInCSVjoinSRTablePanel"
				},
				{
					"name": "joinWithSRSpectralReading"
				},
				{
					"name": "aggregate1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          PANEL_ID as integer,",
				"          NAME as string,",
				"          IS_METALLIC as integer,",
				"          CREATE_USER_ID as integer,",
				"          CREATE_DATE as timestamp,",
				"          NOTES as string,",
				"          IS_PUBLIC as integer,",
				"          ENTITY_ID as integer,",
				"          IS_INACTIVE as integer,",
				"          AUDIT_SEARCH_INDEX_DATE as timestamp,",
				"          IS_FLAGGED as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> SRInCSV",
				"source(output(",
				"          PANEL_ID as integer,",
				"          NAME as string,",
				"          IS_METALLIC as integer,",
				"          CREATE_USER_ID as integer,",
				"          CREATE_DATE as timestamp,",
				"          NOTES as string,",
				"          IS_PUBLIC as integer,",
				"          ENTITY_ID as integer,",
				"          IS_INACTIVE as integer,",
				"          AUDIT_SEARCH_INDEX_DATE as timestamp,",
				"          IS_FLAGGED as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> SRTableSPECTRALMEASUREMENT",
				"source(output(",
				"          PANEL_ID as integer,",
				"          NAME as string,",
				"          IS_METALLIC as integer,",
				"          CREATE_USER_ID as integer,",
				"          CREATE_DATE as timestamp,",
				"          NOTES as string,",
				"          IS_PUBLIC as integer,",
				"          ENTITY_ID as integer,",
				"          IS_INACTIVE as integer,",
				"          AUDIT_SEARCH_INDEX_DATE as timestamp,",
				"          IS_FLAGGED as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> SRSpectralReading",
				"source(output(",
				"          PANEL_ID as integer,",
				"          NAME as string,",
				"          IS_METALLIC as integer,",
				"          CREATE_USER_ID as integer,",
				"          CREATE_DATE as timestamp,",
				"          NOTES as string,",
				"          IS_PUBLIC as integer,",
				"          ENTITY_ID as integer,",
				"          IS_INACTIVE as integer,",
				"          AUDIT_SEARCH_INDEX_DATE as timestamp,",
				"          IS_FLAGGED as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> SRInCsvRejFile",
				"SRInCSV, SRTableSPECTRALMEASUREMENT join(COLOR_Tool_Name == SRTableSPECTRALMEASUREMENT@NAME,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> SRInCSVjoinSRTablePanel",
				"SRInCSVjoinSRTablePanel, SRSpectralReading join(SRTableSPECTRALMEASUREMENT@PANEL_ID == SRSpectralReading@PANEL_ID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinWithSRSpectralReading",
				"joinWithSRSpectralReading aggregate(groupBy(READING_ID,",
				"          Geometry,",
				"          {400},",
				"          SRTableSPECTRALMEASUREMENT@PANEL_ID),",
				"     READING_ID_1 = first(READING_ID),",
				"          Geometry_1 = first(Geometry),",
				"          {400_1} = first(400)) ~> aggregate1",
				"aggregate1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          PANEL_ID as integer,",
				"          NAME as string,",
				"          IS_METALLIC as integer,",
				"          CREATE_USER_ID as integer,",
				"          CREATE_DATE as timestamp,",
				"          NOTES as string,",
				"          IS_PUBLIC as integer,",
				"          ENTITY_ID as integer,",
				"          IS_INACTIVE as integer,",
				"          AUDIT_SEARCH_INDEX_DATE as timestamp,",
				"          IS_FLAGGED as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          READING_ID,",
				"          GEOMETRY = Geometry",
				"     )) ~> SKSpectralMeasurement"
			]
		}
	}
}