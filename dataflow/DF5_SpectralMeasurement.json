{
	"name": "DF5_SpectralMeasurement",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "SQLDynamicDS",
						"type": "DatasetReference"
					},
					"name": "SRInCSV"
				},
				{
					"dataset": {
						"referenceName": "SQLDynamicDS",
						"type": "DatasetReference"
					},
					"name": "SRTableSPECTRALMEASUREMENT"
				},
				{
					"dataset": {
						"referenceName": "SQLDynamicDS",
						"type": "DatasetReference"
					},
					"name": "SRTableSpectralReading"
				},
				{
					"dataset": {
						"referenceName": "SQLDynamicDS",
						"type": "DatasetReference"
					},
					"name": "SRInCsvRejFile"
				},
				{
					"dataset": {
						"referenceName": "SQLDynamicDS",
						"type": "DatasetReference"
					},
					"name": "SRTablePanel"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "SQLDynamicDS",
						"type": "DatasetReference"
					},
					"name": "SKSpectralMeasurement"
				},
				{
					"name": "SKCacheMAXMEASUREMENTID"
				},
				{
					"dataset": {
						"referenceName": "DelimitedTextDymanicCSVFiles",
						"type": "DatasetReference"
					},
					"name": "SKFileMeasurementRejectCSV"
				}
			],
			"transformations": [
				{
					"name": "SRInCSVjoinSRTablePanel"
				},
				{
					"name": "joinWithSRSpectralReading"
				},
				{
					"name": "DistinctValues"
				},
				{
					"name": "SelectTableColumnMeasurement"
				},
				{
					"name": "FNAggMAXMEASUREMENTID",
					"description": "Aggregating data by producing columns 'MAX_MEASUREMENT_ID'"
				},
				{
					"name": "joinSMeasurement"
				},
				{
					"name": "joinSReading"
				},
				{
					"name": "DistinctMeasurementColumns"
				}
			],
			"scriptLines": [
				"source(output(",
				"          COLOR_Tool_Name as string,",
				"          Color_Chip_Name as string,",
				"          DateTime as string,",
				"          Color_Chip_Source as string,",
				"          Scheme as string,",
				"          Instrument as string,",
				"          Geometry as string,",
				"          {400} as string,",
				"          {410} as string,",
				"          {420} as string,",
				"          {430} as string,",
				"          {440} as string,",
				"          {450} as string,",
				"          {460} as string,",
				"          {470} as string,",
				"          {480} as string,",
				"          {490} as string,",
				"          {500} as string,",
				"          {510} as string,",
				"          {520} as string,",
				"          {530} as string,",
				"          {540} as string,",
				"          {550} as string,",
				"          {560} as string,",
				"          {570} as string,",
				"          {580} as string,",
				"          {590} as string,",
				"          {600} as string,",
				"          {610} as string,",
				"          {620} as string,",
				"          {630} as string,",
				"          {640} as string,",
				"          {650} as string,",
				"          {660} as string,",
				"          {670} as string,",
				"          {680} as string,",
				"          {690} as string,",
				"          {700} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> SRInCSV",
				"source(output(",
				"          MEASUREMENT_ID as integer,",
				"          READING_ID as integer,",
				"          GEOMETRY as string,",
				"          RAW_DATA as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> SRTableSPECTRALMEASUREMENT",
				"source(output(",
				"          READING_ID as integer,",
				"          PANEL_ID as integer,",
				"          READING_DATE as timestamp,",
				"          MEASUREMENT_SCHEME as string,",
				"          DEVICE_NAME as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> SRTableSpectralReading",
				"source(output(",
				"          COLOR_Tool_Name as string,",
				"          Color_Chip_Name as string,",
				"          DateTime as string,",
				"          Color_Chip_Source as string,",
				"          Scheme as string,",
				"          Instrument as string,",
				"          Geometry as string,",
				"          {400} as string,",
				"          {410} as string,",
				"          {420} as string,",
				"          {430} as string,",
				"          {440} as string,",
				"          {450} as string,",
				"          {460} as string,",
				"          {470} as string,",
				"          {480} as string,",
				"          {490} as string,",
				"          {500} as string,",
				"          {510} as string,",
				"          {520} as string,",
				"          {530} as string,",
				"          {540} as string,",
				"          {550} as string,",
				"          {560} as string,",
				"          {570} as string,",
				"          {580} as string,",
				"          {590} as string,",
				"          {600} as string,",
				"          {610} as string,",
				"          {620} as string,",
				"          {630} as string,",
				"          {640} as string,",
				"          {650} as string,",
				"          {660} as string,",
				"          {670} as string,",
				"          {680} as string,",
				"          {690} as string,",
				"          {700} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> SRInCsvRejFile",
				"source(output(",
				"          PANEL_ID as integer,",
				"          NAME as string,",
				"          IS_METALLIC as integer,",
				"          CREATE_USER_ID as integer,",
				"          CREATE_DATE as timestamp,",
				"          NOTES as string,",
				"          IS_PUBLIC as integer,",
				"          ENTITY_ID as integer,",
				"          IS_INACTIVE as integer,",
				"          AUDIT_SEARCH_INDEX_DATE as timestamp,",
				"          IS_FLAGGED as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> SRTablePanel",
				"SRInCSV, SRTablePanel join(Color_Chip_Name == NAME,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> SRInCSVjoinSRTablePanel",
				"SRInCSVjoinSRTablePanel, SRTableSpectralReading join(SRTablePanel@PANEL_ID == SRTableSpectralReading@PANEL_ID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinWithSRSpectralReading",
				"joinWithSRSpectralReading aggregate(groupBy(RAW_DATA = concat({400},\",\",{410}),",
				"          READING_ID),",
				"     Geometry = first(Geometry)) ~> DistinctValues",
				"DistinctValues select(mapColumn(",
				"          RAW_DATA,",
				"          READING_ID,",
				"          GEOMETRY = Geometry",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectTableColumnMeasurement",
				"SRTableSPECTRALMEASUREMENT aggregate(MAX_MEASUREMENT_ID = iifNull(max(MEASUREMENT_ID),0)) ~> FNAggMAXMEASUREMENTID",
				"SRInCsvRejFile, SRTableSPECTRALMEASUREMENT join(SRInCsvRejFile@Geometry == SRTableSPECTRALMEASUREMENT@GEOMETRY,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinSMeasurement",
				"joinSMeasurement, SRTableSpectralReading join(SRTableSPECTRALMEASUREMENT@READING_ID == SRTableSpectralReading@READING_ID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinSReading",
				"joinSReading aggregate(groupBy(Color_Chip_Name,",
				"          SRInCsvRejFile@Geometry),",
				"     {400} = first(400)) ~> DistinctMeasurementColumns",
				"SelectTableColumnMeasurement sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          PANEL_COLOR_COORDINATE_ID as integer,",
				"          PANEL_ID as integer,",
				"          GEOMETRY as string,",
				"          SPARKLE as string,",
				"          MEASUREMENT_SCHEME as string,",
				"          L as string,",
				"          A as string,",
				"          B as string,",
				"          C as string,",
				"          ILLUMINANT_OBSERVE as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 3,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          READING_ID,",
				"          GEOMETRY",
				"     )) ~> SKSpectralMeasurement",
				"FNAggMAXMEASUREMENTID sink(validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     store: 'cache',",
				"     format: 'inline',",
				"     output: true,",
				"     saveOrder: 2) ~> SKCacheMAXMEASUREMENTID",
				"DistinctMeasurementColumns sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['SPECTRAL_MEASUREMENT_Rejected.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 1,",
				"     partitionBy('hash', 1)) ~> SKFileMeasurementRejectCSV"
			]
		}
	}
}